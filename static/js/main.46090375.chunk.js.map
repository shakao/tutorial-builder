{"version":3,"sources":["lib/markdown.ts","contexts/tutorial-context.ts","components/TutorialStep.tsx","App.tsx","index.tsx"],"names":["getTutorialMarkdown","title","steps","md","forEach","step","i","showHint","showDialog","headerContentMd","hintContentMd","visibleHint","titleMd","parseTutorial","parsedTutorial","window","pxt","tutorial","getHintMarkdown","hint","language","text","parseHint","trim","match","exec","TutorialContext","React","createContext","setSteps","newSteps","updateStep","index","newStep","TutorialStep","props","className","swapSteps","useState","stepTitle","setStepTitle","stepContent","setStepContent","hintContent","setHintContent","showHintContent","setShowHintContent","isDialog","setIsDialog","hintEitorRef","useRef","useEffect","onStepTitleChange","evt","target","value","onStepContentChange","handleHintEditorRef","editor","monaco","current","languages","typescript","typescriptDefaults","setDiagnosticsOptions","noSemanticValidation","noSyntaxValidation","Consumer","currentStep","onClick","draggable","type","placeholder","onChange","onBlur","rows","name","defaultLanguage","options","minimap","enabled","onMount","newHint","splice","App","tutorialState","setTutorialState","view","setView","undefined","swapState","setSwapState","currentTitle","setCurrentTItle","editorRef","startIndex","endIndex","up","Math","max","down","min","setTimeout","tutorialContext","Provider","newTutorial","getValue","markdown","navigator","clipboard","writeText","then","console","log","err","clipboardData","setData","map","el","defaultValue","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAEO,SAASA,EAAoBC,EAAeC,GAC/C,IAAIC,EAAE,uCAAmCF,EAAnC,QAUN,OATAC,EAAME,SAAQ,SAACC,EAAMC,GACjB,IAAQL,EAA6EI,EAA7EJ,MAAOM,EAAsEF,EAAtEE,SAAUC,EAA4DH,EAA5DG,WAAYC,EAAgDJ,EAAhDI,gBAAiBC,EAA+BL,EAA/BK,cAAeC,EAAgBN,EAAhBM,YACjEC,EAAO,UAAMX,GAAK,eAAYK,GAAvB,YAA+BC,GAAYC,EAAc,YAAc,GAAvE,YAA6EA,EAAa,cAAgB,IAChHP,IAAOW,EAAO,WAAOA,EAAP,MACnBT,GAAE,aAAUS,EAAV,QACFT,GAAE,UAAOM,EAAP,QACEE,IAAaR,GAAE,+BAA4BO,EAA5B,YAGhBP,EAGJ,SAASU,EAAcV,GAC1B,IAAMW,EAAkBC,OAAeC,IAAIC,SAASJ,cAAcV,GAC5DD,EAAQY,EAAeZ,MAI7B,OAHAA,EAAME,SAAQ,SAACC,GACXA,EAAKM,cAAgBN,EAAKK,iBAEvB,CAAET,MAAOa,EAAeb,MAAOC,MAAOA,GAG1C,SAASgB,EAAgBC,GAC5B,GAAKA,EAEL,OAAQA,EAAKC,UACT,IAAK,SACL,IAAK,aACL,IAAK,MACD,MAAM,MAAN,OAAgBD,EAAKC,SAArB,aAAkCD,EAAKE,KAAvC,SAEJ,QACI,OAAOF,EAAKE,MAIjB,SAASC,EAAUnB,GACtB,GAAKA,EAAL,CAEA,IAAIiB,EAAyB,WACzBC,EAAOlB,EAAGoB,OACVC,EAAQ,yDAAyDC,KAAKJ,GAC1E,GAAIG,EAEA,OADAH,EAAOG,EAAM,GACLA,EAAM,IACV,IAAK,SACL,IAAK,aACL,IAAK,MACDJ,EAAWI,EAAM,GACjB,MACJ,IAAK,KACDJ,EAAW,aACX,MACJ,QACIA,EAAW,SAKvB,MAAO,CAAEA,WAAUC,SC3BvB,IAuBaJ,EAAQ,eACdJ,EAxBa,oUA2BPa,EAAkBC,IAAMC,cAAe,CAChDX,WACAY,SAAU,SAACC,KACXC,WAAY,SAACC,EAAeC,O,OC5CzB,SAASC,EAAaC,GACzB,IAAQH,EACmCG,EADnCH,MAAOI,EAC4BD,EAD5BC,UAAWnC,EACiBkC,EADjBlC,MAAOQ,EACU0B,EADV1B,gBAAiBC,EACPyB,EADOzB,cAC9CF,EAAuC2B,EAAvC3B,WAAYG,EAA2BwB,EAA3BxB,YAAa0B,EAAcF,EAAdE,UAC7B,EAAoCC,mBAASrC,GAA7C,mBAAQsC,EAAR,KAAmBC,EAAnB,KACA,EAAwCF,mBAAS7B,GAAjD,mBAAQgC,EAAR,KAAqBC,EAArB,KACA,EAAwCJ,mBAAS5B,GAAjD,mBAAQiC,EAAR,KAAqBC,EAArB,KACA,EAAgDN,mBAAS3B,GAAzD,mBAAQkC,EAAR,KAAyBC,EAAzB,KACA,EAAkCR,mBAAS9B,GAA3C,mBAAQuC,EAAR,KAAkBC,EAAlB,KACMC,EAAeC,iBAAO,MAE5BC,qBAAU,kBAAMX,EAAavC,KAAQ,CAACA,IACtCkD,qBAAU,kBAAMT,EAAejC,KAAkB,CAACA,IAClD0C,qBAAU,kBAAMP,EAAelC,KAAgB,CAACA,IAChDyC,qBAAU,kBAAML,EAAmBnC,KAAc,CAACA,IAClDwC,qBAAU,kBAAMH,EAAYxC,KAAa,CAACA,IAE1C,IAAM4C,EAAoB,SAACC,GACvBb,EAAaa,EAAIC,OAAOC,QAGtBC,EAAsB,SAACH,GACzBX,EAAeW,EAAIC,OAAOC,QAG9B,SAASE,EAAoBC,EAAaC,GACtCV,EAAaW,QAAUF,EACvBC,EAAOE,UAAUC,WAAWC,mBAAmBC,sBAAsB,CACjEC,sBAAsB,EACtBC,oBAAoB,IAK5B,OACI,cAACxC,EAAgByC,SAAjB,UACK,YAAuC,IAArClD,EAAoC,EAApCA,SAAUY,EAA0B,EAA1BA,SAAUE,EAAgB,EAAhBA,WACbZ,EAAOG,EAAUqB,GACjByB,EAAc,CAChBnE,MAAOsC,EACP9B,gBAAiBgC,EACjB/B,cAAeiC,EACfnC,WAAYuC,EACZpC,YAAakC,GAEjB,OAAQ,sBAAKT,UAAS,wBAAmBA,GAAa,IAA9C,UACJ,sBAAKA,UAAU,qBAAf,UACI,sBAAKA,UAAU,cAAf,UACI,qBAAKA,UAAU,kBAAf,SACI,mBAAGA,UAAU,qBAAqBiC,QAAS,kBAAMhC,EAAUL,EAAOA,EAAQ,QAE9E,qBAAKI,UAAU,qBAAf,SACI,mBAAGA,UAAU,uBAAuBiC,QAAS,kBAAMhC,EAAUL,EAAOA,EAAQ,WAGpF,sBAAKI,UAAU,eAAekC,WAAW,EAAzC,UACI,sBAAKlC,UAAU,aAAf,UACI,uBAAOmC,KAAK,OAAOhB,MAAOhB,EAAWiC,YAAY,mBAAmBC,SAAUrB,EAC1EsB,OAAQ,kBAAM3C,EAAWC,EAAOoC,MACpC,0CACA,mBAAGhC,UAAS,iCAA4BW,EAAW,QAAU,IACzDsB,QAAS,kBAAMtC,EAAWC,EAAO,CAC7BxB,YAAauC,EACbxC,UAAWwC,UAGvB,qBAAKX,UAAU,YAAf,SACI,0BAAUuC,KAAM,EAAGpB,MAAOd,EAAagC,SAAUjB,EAC7CkB,OAAQ,kBAAM3C,EAAWC,EAAOoC,QAExC,sBAAKhC,UAAU,YAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,sBAAKA,UAAU,qBAAf,UACI,4CACA,mBAAGA,UAAS,iCAA4BS,EAAkB,QAAU,IAChEwB,QAAS,kBAAMtC,EAAWC,EAAO,CAAErB,aAAckC,UAExDA,GAAmB,sBAAKT,UAAU,sBAAf,UAChB,8CACA,yBAAQwC,KAAK,WAAWrB,MAAK,OAAEpC,QAAF,IAAEA,OAAF,EAAEA,EAAMC,SACjCqD,SAAU,SAACpB,GACPtB,EAAWC,EAAO,CACdtB,cAAeQ,EAAgB,CAACG,MAAU,OAAJF,QAAI,IAAJA,OAAA,EAAAA,EAAME,OAAQ,GAAID,SAAUiC,EAAIC,OAAOC,WAHzF,UAMI,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,aAAd,wBACA,wBAAQA,MAAM,MAAd,oBACA,wBAAQA,MAAM,WAAd,+BAIXV,GAAmB,qBAAKT,UAAU,YAAf,SAChB,cAAC,IAAD,CAAQyC,gBAAgB,aAAatB,MAAK,OAAEpC,QAAF,IAAEA,OAAF,EAAEA,EAAME,KAC9CyD,QAAS,CAAEC,QAAS,CAAEC,SAAS,IAC/BC,QAASxB,EACTgB,SAAU,SAAClB,GACP,IAAM2B,EAAU5D,EAAUZ,GAC1BqB,EAAWC,EAAO,CAEdtB,cAAeQ,EAAgB,CAACG,KAAMkC,GAAS,GAAInC,UAAiB,OAAP8D,QAAO,IAAPA,OAAA,EAAAA,EAAS9D,WAAY,6BAO9G,sBAAKgB,UAAU,wBAAf,UACI,qBAAKA,UAAU,cAAciC,QAAS,WAC9BpD,EAASf,MAAMiF,OAAOnD,EAAO,GAC7BH,EAASZ,EAASf,QAF1B,SAII,mBAAGkC,UAAU,wBAEjB,qBAAKA,UAAU,cAAciC,QAAS,WAC9BpD,EAASf,MAAMiF,OAAOnD,EAAQ,EAAG,EAAG,IACpCH,EAASZ,EAASf,QAF1B,SAII,mBAAGkC,UAAU,kCCI1BgD,MAhIf,WACI,MAA0C9C,mBAASrB,GAAnD,mBAAOoE,EAAP,KAAsBC,EAAtB,KACQrF,EAAiBoF,EAAjBpF,MAAOC,EAAUmF,EAAVnF,MAEf,EAAwBoC,mBAA+B,SAAvD,mBAAOiD,EAAP,KAAaC,EAAb,KACA,EAAkClD,wBAAgCmD,GAAlE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCrD,mBAASrC,GAAjD,mBAAO2F,EAAP,KAAqBC,EAArB,KAEMC,EAAY5C,iBAAO,MAkCnBb,EAAY,SAAC0D,EAAoBC,GAC9BN,IACDC,EAAa,CACTM,GAAIC,KAAKC,IAAIJ,EAAYC,GACzBI,KAAMF,KAAKG,IAAIN,EAAYC,KAG/BM,YAAW,WAAO,IAAD,EAC0B,CAACpG,EAAM8F,GAAW9F,EAAM6F,IAA9D7F,EAAM6F,GADM,KACO7F,EAAM8F,GADb,KAEbnE,EAAS3B,GACTyF,OAAaF,KACd,OAIL5D,EAAW,SAACC,GACdwD,EAAiB,2BACVD,GADS,IAEZnF,MAAO4B,MAgBTyE,EAAkB,CACpBtF,SAAUoE,EACVxD,WACAE,WAfe,SAACC,EAAeC,GAC/B,IAAIH,EAAWuD,EAAcnF,MAC7B4B,EAASE,GAAT,2BACOF,EAASE,IACTC,GAEPqD,EAAiB,2BACVD,GADS,IAEZnF,MAAO4B,OAcf,OACI,cAACJ,EAAgB8E,SAAjB,CAA0BjD,MAAOgD,EAAjC,SACI,sBAAKnE,UAAU,MAAf,UACI,sBAAKA,UAAU,SAAf,UACI,qBAAKA,UAAU,kBAAf,SACI,uBAAOmB,MAAOqC,EAAcnB,SAnDrB,SAACpB,GAAD,OAAcwC,EAAgBxC,EAAIC,OAAOC,QAmDUmB,OA1D7D,WACbY,EAAiB,2BACVD,GADS,IAEZpF,MAAO2F,UAyDC,sBAAKxD,UAAU,mBAAf,UACI,sBAAKA,UAAU,4BAA4BiC,QApF5C,WACf,GAAa,UAATkB,EACAC,EAAQ,gBACL,CACH,IAAMiB,GAAuB,OAATX,QAAS,IAATA,OAAA,EAAAA,EAAWlC,SAAU/C,EAAeiF,EAAUlC,QAAgB8C,YAAcrB,EAChGxD,EAAS4E,EAAYvG,OACrBsF,EAAQ,WA8EI,UACI,mBAAGpD,UAAS,kBAAsB,UAATmD,EAAmB,OAAS,aACrD,8CAAwB,UAATA,EAAmB,WAAa,iBAEnD,qBAAKnD,UAAU,gBAAgBiC,QA9E9B,WACjB,IAAMsC,EAAW3G,EAAoBC,EAAOC,GACxC0G,UAAUC,UACVD,UAAUC,UAAUC,UAAUH,GAAUI,MAAK,WACzCC,QAAQC,IAAI,2BACb,SAACC,GACAF,QAAQC,IAAI,2BAA4BC,MAEpCnG,OAAeoG,eACtBpG,OAAeoG,cAAcC,QAAQ,OAAQT,IAqElC,SACI,mBAAGvE,UAAU,yBAIzB,sBAAKA,UAAU,YAAf,UACc,UAATmD,GAAoB,qBAAKnD,UAAU,0BAAf,SAChBlC,EAAMmH,KAAI,SAACC,EAAIhH,GACZ,MACgCgH,EADxBrH,EAAR,EAAQA,MAAOQ,EAAf,EAAeA,gBAAiBC,EAAhC,EAAgCA,cAC5BF,EADJ,EACIA,WAAYG,EADhB,EACgBA,YAChB,OAAO,cAACuB,EAAD,CAAgCF,MAAO1B,EAC1C8B,WAAoB,OAATsD,QAAS,IAATA,OAAA,EAAAA,EAAWO,MAAO3F,EAAI,gBACjB,OAAToF,QAAS,IAATA,OAAA,EAAAA,EAAWU,QAAS9F,EAAI,iBAAmB,GAClDL,MAAOA,GAAS,GAAIQ,gBAAiBA,GAAmB,GACxDC,cAAeA,GAAiB,GAAIF,WAAYA,EAChDG,YAAaA,EACb0B,UAAWA,GANR,eAA2B/B,SAShC,aAATiF,GAAuB,qBAAKnD,UAAU,oBAAf,SACpB,cAAC,IAAD,CAAQyC,gBAAgB,WACpB0C,aAAcvH,EAAoBC,EAAOC,GACzC+E,QAtCxB,SAAyBvB,EAAaC,GAClCmC,EAAUlC,QAAUF,gBC5F5B8D,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.46090375.chunk.js","sourcesContent":["import { TutorialStepInfo, TutorialHint, HintLanguage } from '../contexts/tutorial-context';\r\n\r\nexport function getTutorialMarkdown(title: string, steps: TutorialStepInfo[]) {\r\n    let md = `### @explicitHints true\\n\\n# ${title}\\n\\n`;\r\n    steps.forEach((step, i) => {\r\n        const { title, showHint, showDialog, headerContentMd, hintContentMd, visibleHint } = step;\r\n        let titleMd = `${title || `Step ${i}`} ${(showHint || showDialog) ? \"@showHint\" : \"\"} ${showDialog ? \"@showDialog\" : \"\"}`\r\n        if (!title) titleMd = `{${titleMd}}`;\r\n        md += `## ${titleMd}\\n\\n`;\r\n        md += `${headerContentMd}\\n\\n`;\r\n        if (visibleHint) md += `#### ~ tutorialhint\\n${hintContentMd}\\n\\n`;\r\n    })\r\n\r\n    return md;\r\n}\r\n\r\nexport function parseTutorial(md: string): { title: string, steps: TutorialStepInfo[] } {\r\n    const parsedTutorial = (window as any).pxt.tutorial.parseTutorial(md);\r\n    const steps = parsedTutorial.steps;\r\n    steps.forEach((step: TutorialStepInfo) => {\r\n        step.visibleHint = !!step.hintContentMd;\r\n    })\r\n    return { title: parsedTutorial.title, steps: steps };\r\n}\r\n\r\nexport function getHintMarkdown(hint?: TutorialHint): string | undefined {\r\n    if (!hint) return;\r\n\r\n    switch (hint.language) {\r\n        case \"blocks\":\r\n        case \"typescript\":\r\n        case \"spy\":\r\n            return `\\`\\`\\`${hint.language}\\n${hint.text}\\n\\`\\`\\``\r\n        case \"markdown\":\r\n        default:\r\n            return hint.text\r\n    }\r\n}\r\n\r\nexport function parseHint(md?: string): TutorialHint | undefined {\r\n    if (!md) return;\r\n\r\n    let language: HintLanguage = \"markdown\";\r\n    let text = md.trim();\r\n    let match = /^```\\s*(blocks|ts|typescript|spy)\\s*([\\s\\S]+)\\s*```/gmi.exec(text);\r\n    if (match) {\r\n        text = match[2];\r\n        switch (match[1]) {\r\n            case \"blocks\":\r\n            case \"typescript\":\r\n            case \"spy\":\r\n                language = match[1];\r\n                break;\r\n            case \"ts\":\r\n                language = \"typescript\";\r\n                break;\r\n            default:\r\n                language = \"blocks\"\r\n                break;\r\n        }\r\n    }\r\n\r\n    return { language, text }\r\n}","import React from 'react';\r\nimport { parseTutorial  } from '../lib/markdown';\r\n\r\nexport interface TutorialStepInfo {\r\n    showHint?: boolean; // automatically displays hint\r\n    showDialog?: boolean; // no coding, displays in modal\r\n    resetDiff?: boolean; // reset diffify algo\r\n    tutorialCompleted?: boolean;\r\n\r\n    // Step content\r\n    title?: string;\r\n    activity?: number;\r\n    headerContentMd?: string;\r\n    hintContentMd?: string;\r\n\r\n    // State info\r\n    visibleHint?: boolean;\r\n\r\n    // Not used\r\n    contentMd?: string;\r\n}\r\n\r\nexport interface TutorialInfo {\r\n    title: string;\r\n    steps: TutorialStepInfo[];\r\n    code?: string[];\r\n}\r\n\r\nexport type HintLanguage = \"markdown\" | \"typescript\" | \"blocks\" | \"spy\";\r\n\r\nexport interface TutorialHint {\r\n    language: HintLanguage;\r\n    text: string;\r\n}\r\n\r\nlet tutorialTemplate = `\r\n# My Tutorial\r\n\r\n## Step 1 @showDialog\r\n\r\nWelcome to my tutorial! This is the first step and it is a dialog\r\n\r\n## Step 2\r\n\r\nLet's write some code! Click the hint if you need help.\r\n\r\n\\`\\`\\`blocks\r\nlet x = 2;\r\nlet y = 3;\r\nlet z = x + y;\r\n\\`\\`\\`\r\n\r\n## Step 3\r\n\r\nGreat work! Click the **Done** button to exit the tutorial.\r\n\r\n`\r\n\r\nexport const tutorial = {\r\n    ...parseTutorial(tutorialTemplate)\r\n};\r\n\r\nexport const TutorialContext = React.createContext( {\r\n    tutorial,\r\n    setSteps: (newSteps: TutorialStepInfo[]) => {},\r\n    updateStep: (index: number, newStep: TutorialStepInfo) => {}\r\n});","import { useEffect, useState, useRef } from 'react';\r\nimport Editor from \"@monaco-editor/react\";\r\n\r\nimport { parseHint, getHintMarkdown } from '../lib/markdown';\r\n\r\nimport { TutorialContext } from '../contexts/tutorial-context';\r\n\r\ninterface TutorialStepProps {\r\n    index: number;\r\n    className?: string;\r\n\r\n    title: string;\r\n    headerContentMd: string;\r\n    hintContentMd?: string;\r\n    showDialog?: boolean;\r\n\r\n    visibleHint?: boolean;\r\n\r\n    swapSteps: (startIndex: number, endIndex: number) => void;\r\n}\r\n\r\nexport function TutorialStep(props: TutorialStepProps) {\r\n    const { index, className, title, headerContentMd, hintContentMd,\r\n        showDialog, visibleHint, swapSteps } = props;\r\n    const [ stepTitle, setStepTitle ] = useState(title);\r\n    const [ stepContent, setStepContent ] = useState(headerContentMd);\r\n    const [ hintContent, setHintContent ] = useState(hintContentMd);\r\n    const [ showHintContent, setShowHintContent ] = useState(visibleHint);\r\n    const [ isDialog, setIsDialog ] = useState(showDialog);\r\n    const hintEitorRef = useRef(null);\r\n\r\n    useEffect(() => setStepTitle(title), [title]);\r\n    useEffect(() => setStepContent(headerContentMd), [headerContentMd]);\r\n    useEffect(() => setHintContent(hintContentMd), [hintContentMd]);\r\n    useEffect(() => setShowHintContent(visibleHint), [visibleHint]);\r\n    useEffect(() => setIsDialog(showDialog), [showDialog]);\r\n\r\n    const onStepTitleChange = (evt: any) => {\r\n        setStepTitle(evt.target.value)\r\n    }\r\n\r\n    const onStepContentChange = (evt: any) => {\r\n        setStepContent(evt.target.value)\r\n    }\r\n\r\n    function handleHintEditorRef(editor: any, monaco: any) {\r\n        hintEitorRef.current = editor;\r\n        monaco.languages.typescript.typescriptDefaults.setDiagnosticsOptions({\r\n            noSemanticValidation: true,\r\n            noSyntaxValidation: true,\r\n        });\r\n    }\r\n\r\n\r\n    return (\r\n        <TutorialContext.Consumer>\r\n            {({tutorial, setSteps, updateStep}) => {\r\n                const hint = parseHint(hintContent);\r\n                const currentStep = {\r\n                    title: stepTitle,\r\n                    headerContentMd: stepContent,\r\n                    hintContentMd: hintContent,\r\n                    showDialog: isDialog,\r\n                    visibleHint: showHintContent\r\n                }\r\n                return (<div className={`tutorial-step ${className || \"\"}`}>\r\n                    <div className=\"tutorial-step-body\">\r\n                        <div className=\"step-handle\">\r\n                            <div className=\"step-handle-top\">\r\n                                <i className=\"ui icon chevron up\" onClick={() => swapSteps(index, index - 1)} />\r\n                            </div>\r\n                            <div className=\"step-handle-bottom\">\r\n                                <i className=\"ui icon chevron down\" onClick={() => swapSteps(index, index + 1)}  />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"step-content\" draggable={false}>\r\n                            <div className=\"step-title\">\r\n                                <input type=\"text\" value={stepTitle} placeholder=\"Enter step title\" onChange={onStepTitleChange}\r\n                                    onBlur={() => updateStep(index, currentStep)} />\r\n                                <span>Dialog</span>\r\n                                <i className={`ui icon square outline ${isDialog ? \"check\" : \"\"}`}\r\n                                    onClick={() => updateStep(index, {\r\n                                        showDialog: !isDialog,\r\n                                        showHint: !isDialog\r\n                                    })} />\r\n                            </div>\r\n                            <div className=\"step-body\">\r\n                                <textarea rows={5} value={stepContent} onChange={onStepContentChange}\r\n                                    onBlur={() => updateStep(index, currentStep)} />\r\n                            </div>\r\n                            <div className=\"step-hint\">\r\n                                <div className=\"hint-controls\">\r\n                                    <div className=\"hint-controls-left\">\r\n                                        <span>Has hint</span>\r\n                                        <i className={`ui icon square outline ${showHintContent ? \"check\" : \"\"}`}\r\n                                            onClick={() => updateStep(index, { visibleHint: !showHintContent })} />\r\n                                    </div>\r\n                                    {showHintContent && <div className=\"hint-controls-right\">\r\n                                        <label>Language:</label>\r\n                                        <select name=\"language\" value={hint?.language}\r\n                                            onChange={(evt: any) => {\r\n                                                updateStep(index, {\r\n                                                    hintContentMd: getHintMarkdown({text: hint?.text || \"\", language: evt.target.value})\r\n                                                })\r\n                                            }}>\r\n                                            <option value=\"blocks\">Blocks</option>\r\n                                            <option value=\"typescript\">JavaScript</option>\r\n                                            <option value=\"spy\">Python</option>\r\n                                            <option value=\"markdown\">Markdown</option>\r\n                                        </select>\r\n                                    </div>}\r\n                                </div>\r\n                                {showHintContent && <div className=\"hint-body\">\r\n                                    <Editor defaultLanguage=\"typescript\" value={hint?.text}\r\n                                        options={{ minimap: { enabled: false } }}\r\n                                        onMount={handleHintEditorRef}\r\n                                        onChange={(value?: string) => {\r\n                                            const newHint = parseHint(hintContentMd);\r\n                                            updateStep(index, {\r\n                                                // TODO these defaults are probably bad\r\n                                                hintContentMd: getHintMarkdown({text: value || \"\", language: newHint?.language || \"markdown\"})\r\n                                            })\r\n                                        }} />\r\n                                </div>}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"tutorial-step-actions\">\r\n                        <div className=\"step-button\" onClick={() => {\r\n                                tutorial.steps.splice(index, 1);\r\n                                setSteps(tutorial.steps);\r\n                            }}>\r\n                            <i className=\"ui icon trash can\" />\r\n                        </div>\r\n                        <div className=\"step-button\" onClick={() => {\r\n                                tutorial.steps.splice(index + 1, 0, { });\r\n                                setSteps(tutorial.steps);\r\n                            }}>\r\n                            <i className=\"ui icon add circle\" />\r\n                        </div>\r\n                    </div>\r\n                </div>)\r\n            }}\r\n        </TutorialContext.Consumer>\r\n    );\r\n}","import { useState, useRef } from 'react';\nimport Editor from \"@monaco-editor/react\";\n\nimport './styles/App.css';\n\nimport { getTutorialMarkdown, parseTutorial } from './lib/markdown';\nimport { TutorialStepInfo, TutorialContext, tutorial } from './contexts/tutorial-context';\nimport { TutorialStep } from './components/TutorialStep';\n\ninterface SwapState {\n    up: number;\n    down: number;\n}\n\nfunction App() {\n    const [tutorialState, setTutorialState] = useState(tutorial);\n    const { title, steps } = tutorialState;\n\n    const [view, setView] = useState<\"steps\" | \"markdown\">(\"steps\");\n    const [swapState, setSwapState] = useState<SwapState | undefined>(undefined);\n    const [currentTitle, setCurrentTItle] = useState(title);\n\n    const editorRef = useRef(null);\n\n    const toggleView = () => {\n        if (view === \"steps\") {\n            setView(\"markdown\");\n        } else {\n            const newTutorial = editorRef?.current ? parseTutorial((editorRef.current as any).getValue()) : tutorialState;\n            setSteps(newTutorial.steps);\n            setView(\"steps\");\n        }\n    }\n\n    const copyMarkdown = () => {\n        const markdown = getTutorialMarkdown(title, steps);\n        if (navigator.clipboard) {\n            navigator.clipboard.writeText(markdown).then(() => {\n                console.log(\"Copied to clipboard.\");\n            }, (err) => {\n                console.log(\"Failed to copy markdown.\", err);\n            });\n        } else if ((window as any).clipboardData) {\n            (window as any).clipboardData.setData(\"Text\", markdown);\n        }\n    }\n\n    const setTitle = () => {\n        setTutorialState({\n            ...tutorialState,\n            title: currentTitle\n        })\n    }\n\n    const onTitleInputChange = (evt: any) => setCurrentTItle(evt.target.value)\n\n    const swapSteps = (startIndex: number, endIndex: number) => {\n        if (!swapState) {\n            setSwapState({\n                up: Math.max(startIndex, endIndex),\n                down: Math.min(startIndex, endIndex)\n            })\n\n            setTimeout(() => {\n                [steps[startIndex], steps[endIndex]] = [steps[endIndex], steps[startIndex]];\n                setSteps(steps);\n                setSwapState(undefined);\n            }, 400)\n        }\n    }\n\n    const setSteps = (newSteps: TutorialStepInfo[]) => {\n        setTutorialState({\n            ...tutorialState,\n            steps: newSteps\n        })\n    };\n\n    const updateStep = (index: number, newStep: TutorialStepInfo) => {\n        let newSteps = tutorialState.steps;\n        newSteps[index] = {\n            ...newSteps[index],\n            ...newStep\n        };\n        setTutorialState({\n            ...tutorialState,\n            steps: newSteps\n        })\n    };\n\n    const tutorialContext = {\n        tutorial: tutorialState,\n        setSteps,\n        updateStep\n    }\n\n    function handleEditorRef(editor: any, monaco: any) {\n        editorRef.current = editor;\n    }\n\n    return (\n        <TutorialContext.Provider value={tutorialContext}>\n            <div className=\"app\">\n                <div className=\"header\">\n                    <div className=\"header-bar-left\">\n                        <input value={currentTitle} onChange={onTitleInputChange} onBlur={setTitle}></input>\n                    </div>\n                    <div className=\"header-bar-right\">\n                        <div className=\"header-button toggle-view\" onClick={toggleView}>\n                            <i className={`ui icon ${view === \"steps\" ? \"code\" : \"list ol\"}`} />\n                            <span>{`View ${view === \"steps\" ? \"Markdown\" : \"Tutorial\"}`}</span>\n                        </div>\n                        <div className=\"header-button\" onClick={copyMarkdown}>\n                            <i className=\"ui icon copy\" />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"container\">\n                    {view === \"steps\" && <div className=\"tutorial-step-container\">\n                        {steps.map((el, i) => {\n                            const { title, headerContentMd, hintContentMd,\n                                showDialog, visibleHint } = el as TutorialStepInfo;\n                            return <TutorialStep key={`step_${i}`} index={i}\n                                className={swapState?.up === i ? \"animating up\"\n                                    : (swapState?.down === i ? \"animating down\" : \"\" )}\n                                title={title || \"\"} headerContentMd={headerContentMd || \"\"}\n                                hintContentMd={hintContentMd || \"\"} showDialog={showDialog}\n                                visibleHint={visibleHint}\n                                swapSteps={swapSteps} />\n                        })}\n                    </div>}\n                    {view === \"markdown\" && <div className=\"tutorial-markdown\">\n                        <Editor defaultLanguage=\"markdown\"\n                            defaultValue={getTutorialMarkdown(title, steps)}\n                            onMount={handleEditorRef} />\n                    </div>}\n                </div>\n            </div>\n        </TutorialContext.Provider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}